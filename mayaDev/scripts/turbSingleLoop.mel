global proc turbSingleLoop(float $loopLength){
    
print("turbSingleLoop mm 2016\n");
print("Turbulizes meshes, nurbs surfaces, curves, lattices, particles and nParticles.\n\n");

select `ls -selection -dag -leaf -type nurbsCurve -type lattice -type particle -type nParticle -type nurbsSurface -type mesh`; //select shape nodes of selected objects filtered by type
   
string $objNameArray[] = `ls -selection`; //get list of selected objects filtered by type
if (size ($objNameArray)==0){
    error "No meshes, nurbs surfaces, curves, lattices or particles selected!";
    }
pickWalk -direction up;//get the transform(s); deformers get added via the transform node.
$objNameArray = `ls -selection`; //get list of selected objects' transforms filtered by type
print ($objNameArray);
print("\n");
select -clear;

string $objName;
int $numGeo = `size $objNameArray`;
string $texDefName="turbTextureDeformer";
string $texDefHandleName=("textureDeformerHandle1");
string $texDefHanNewName;
string $noise1Name;
string $noise2Name;
string $noise3Name;
string $attr1Name;
string $attr2Name;
string $placementName;
string $newNameArray[];
string $groupName="turbulizeGroup0";
string $xDefName;
string $yDefName;
string $zDefName;
float $time;
float $value=$loopLength*.02;

group -empty -n $groupName;
$newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
$groupName=$newNameArray[0];
addAttr -ln "amplitude"  -at double  -min 0 -max 10 -dv 0 $groupName;
$attr1Name=($groupName+".amplitude");
setAttr -e-keyable true $attr1Name .2;
string $amplitude=$attr1Name;//used later to connect top-node custom attribute to deformer envelope attr.

addAttr -ln "size"  -at double  -min 0 -max 10 $groupName;
$attr1Name=($groupName+".size");
setAttr -e-keyable true $attr1Name 1;
string $placementSize=$attr1Name;//used later to connect top-node custom attr to placement node scale values

addAttr -ln "time1"  -at double  -dv 0 $groupName;
$attr1Name=($groupName+".time1");
setAttr -e-keyable true $attr1Name;
string $time1=$attr1Name;//used later to connect top-node custom attr to noise function time attr.
$time = 0;
setKeyframe -attribute "time1" -t $time -v 0  -inTangentType flat -outTangentType flat $groupName;
$time=$loopLength*.5;
setKeyframe -attribute "time1" -t $time -v $value  -inTangentType flat -outTangentType flat $groupName;
$time=$loopLength;
setKeyframe -attribute "time1" -t $time -v 0  -inTangentType flat -outTangentType flat $groupName;
$attr1Name=($groupName +"_time1.preInfinity");
setAttr $attr1Name 3;
$attr1Name=($groupName +"_time1.postInfinity");
setAttr $attr1Name 3;

addAttr -ln "time2"  -at double  -dv 0 $groupName;
$attr1Name=($groupName+".time2");
setAttr -e-keyable true $attr1Name;
string $time2=$attr1Name;//used later to connect top-node custom attr to noise function time attr.
$time=$loopLength*.33;
setKeyframe -attribute "time2" -t $time -v 0  -inTangentType flat -outTangentType flat $groupName;
$time=$loopLength*.83;
setKeyframe -attribute "time2" -t $time -v $value  -inTangentType flat -outTangentType flat $groupName;
$time=$loopLength*1.33;
setKeyframe -attribute "time2" -t $time -v 0  -inTangentType flat -outTangentType flat $groupName;
$attr1Name=($groupName +"_time2.preInfinity");
setAttr $attr1Name 3;
$attr1Name=($groupName +"_time2.postInfinity");
setAttr $attr1Name 3;

addAttr -ln "time3"  -at double  -dv 0 $groupName;
$attr1Name=($groupName+".time3");
setAttr -e-keyable true $attr1Name;
string $time3=$attr1Name;//used later to connect top-node custom attr to noise function time attr.
$time=$loopLength*.67;
setKeyframe -attribute "time3" -t $time -v 0  -inTangentType flat -outTangentType flat $groupName;
$time=$loopLength*1.17;
setKeyframe -attribute "time3" -t $time -v $value  -inTangentType flat -outTangentType flat $groupName;
$time=$loopLength*1.67;
setKeyframe -attribute "time3" -t $time -v 0  -inTangentType flat -outTangentType flat $groupName;
$attr1Name=($groupName +"_time3.preInfinity");
setAttr $attr1Name 3;
$attr1Name=($groupName +"_time3.postInfinity");
setAttr $attr1Name 3;

addAttr -ln "pointSpaceLocal" -at bool $groupName;
$attr1Name=($groupName+".pointSpaceLocal");
setAttr $attr1Name 1;

    //make the 1st noise texture and set its attributes
	$noise1Name=("texDefVolNoise1");
    shadingNode -n $noise1Name -asTexture volumeNoise;
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $noise1Name=$newNameArray[0];
    $attr1Name=($noise1Name+".ratio");
    setAttr $attr1Name .6;
    $attr1Name=($noise1Name+".colorOffset");
    setAttr $attr1Name -type double3 -0.5 -0.5 -0.5;
    $attr1Name=($noise1Name+".frequency");
    setAttr $attr1Name 4;
    $attr1Name=($noise1Name+".noiseType");
    setAttr $attr1Name 0;
    $attr1Name=$time1;
    $attr2Name=($noise1Name+".time");
    connectAttr $attr1Name $attr2Name;
	//create placement node.
    $placementName=($noise1Name+"_3dPlacement");
    shadingNode -asUtility-n $placementName place3dTexture;
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $placementName=$newNameArray[0];
    $attr1Name=($placementName+".worldInverseMatrix");
    $attr2Name=($noise1Name+".placementMatrix");
    connectAttr -f $attr1Name $attr2Name;
    $attr1Name=($placementName+".inheritsTransform");
    setAttr $attr1Name 0;
    parent $placementName $groupName;
    $attr1Name=$placementSize;
    $attr2Name=($placementName+".scaleX");
    connectAttr $attr1Name $attr2Name;
    $attr2Name=($placementName+".scaleY");
    connectAttr $attr1Name $attr2Name;
    $attr2Name=($placementName+".scaleZ");
    connectAttr $attr1Name $attr2Name;   

  //make the 2nd noise texture and set its attributes
	$noise2Name=("texDefVolNoise2");
    shadingNode -n $noise2Name -asTexture volumeNoise;
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $noise2Name=$newNameArray[0];
    $attr1Name=($noise2Name+".ratio");
    setAttr $attr1Name .6;
    $attr1Name=($noise2Name+".colorOffset");
    setAttr $attr1Name -type double3 -0.5 -0.5 -0.5;
    $attr1Name=($noise2Name+".frequency");
    setAttr $attr1Name 4;
    $attr1Name=($noise2Name+".noiseType");
    setAttr $attr1Name 0;
    $attr1Name=$time2;
    $attr2Name=($noise2Name+".time");
    connectAttr $attr1Name $attr2Name;
	//create placement node.
    $placementName=($noise2Name+"_3dPlacement");
    shadingNode -asUtility-n $placementName place3dTexture;
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $placementName=$newNameArray[0];
    $attr1Name=($placementName+".worldInverseMatrix");
    $attr2Name=($noise2Name+".placementMatrix");
    connectAttr -f $attr1Name $attr2Name;
    $attr1Name=($placementName+".inheritsTransform");
    setAttr $attr1Name 0;
    parent $placementName $groupName;
    $attr1Name=$placementSize;
    $attr2Name=($placementName+".scaleX");
    connectAttr $attr1Name $attr2Name;
    $attr2Name=($placementName+".scaleY");
    connectAttr $attr1Name $attr2Name;
    $attr2Name=($placementName+".scaleZ");
    connectAttr $attr1Name $attr2Name;   

  //make the 3rd noise texture and set its attributes
	$noise3Name=("texDefVolNoise3");
    shadingNode -n $noise3Name -asTexture volumeNoise;
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $noise3Name=$newNameArray[0];
    $attr1Name=($noise3Name+".ratio");
    setAttr $attr1Name .6;
    $attr1Name=($noise3Name+".colorOffset");
    setAttr $attr1Name -type double3 -0.5 -0.5 -0.5;
    $attr1Name=($noise3Name+".frequency");
    setAttr $attr1Name 4;
    $attr1Name=($noise3Name+".noiseType");
    setAttr $attr1Name 0;
    $attr1Name=$time3;
    $attr2Name=($noise3Name+".time");
    connectAttr $attr1Name $attr2Name;
	//create placement node.
    $placementName=($noise3Name+"_3dPlacement");
    shadingNode -asUtility-n $placementName place3dTexture;
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $placementName=$newNameArray[0];
    $attr1Name=($placementName+".worldInverseMatrix");
    $attr2Name=($noise3Name+".placementMatrix");
    connectAttr -f $attr1Name $attr2Name;
    $attr1Name=($placementName+".inheritsTransform");
    setAttr $attr1Name 0;
    parent $placementName $groupName;
    $attr1Name=$placementSize;
    $attr2Name=($placementName+".scaleX");
    connectAttr $attr1Name $attr2Name;
    $attr2Name=($placementName+".scaleY");
    connectAttr $attr1Name $attr2Name;
    $attr2Name=($placementName+".scaleZ");
    connectAttr $attr1Name $attr2Name;   

  //make the texture deformers for x, y and z deformation
	//X
    select $objNameArray[0];
	print ("texDefName="+$texDefName+"\n");
    textureDeformer -name ($texDefName+"X") -envelope 1 -strength 1 -offset 0 -vectorStrength 1 0 0 -vectorOffset 0 0 0 -vectorSpace "World" -direction "Vector" -pointSpace "Local" -exclusive "";
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $texDefName=$newNameArray[0];
    $xDefName=$texDefName;
    $attr1Name=($texDefName+".vectorStrength");
    setAttr $attr1Name 1 0 0;
    parent $texDefHandleName $groupName;
    $texDefHanNewName=($texDefName+"Handle0");
    select $texDefHandleName;
    rename $texDefHanNewName;
    $attr1Name=$amplitude;
    $attr2Name=($texDefName+".envelope");
    connectAttr $attr1Name $attr2Name;
    $attr1Name=($noise1Name+".outColor");
    $attr2Name=($texDefName+".texture");
    connectAttr $attr1Name $attr2Name;
    $attr1Name= ($groupName+".pointSpaceLocal");
    $attr2Name=($texDefName+".pointSpace");
    connectAttr $attr1Name $attr2Name;
	//Y   
    select $objNameArray[0];
	print ("texDefName="+$texDefName+"\n");
    textureDeformer -name ($texDefName+"Y") -envelope 1 -strength 1 -offset 0 -vectorStrength 1 0 0 -vectorOffset 0 0 0 -vectorSpace "World" -direction "Vector" -pointSpace "Local" -exclusive "";
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $texDefName=$newNameArray[0];
    $yDefName=$texDefName;
    $attr1Name=($texDefName+".vectorStrength");
    setAttr $attr1Name 0 1 0;
    parent $texDefHandleName $groupName;
    $texDefHanNewName=($texDefName+"Handle0");
    select $texDefHandleName;
    rename $texDefHanNewName;
    $attr1Name=$amplitude;
    $attr2Name=($texDefName+".envelope");
    connectAttr $attr1Name $attr2Name;
    $attr1Name=($noise2Name+".outColor");
    $attr2Name=($texDefName+".texture");
    connectAttr $attr1Name $attr2Name;
    $attr1Name= ($groupName+".pointSpaceLocal");
    $attr2Name=($texDefName+".pointSpace");
    connectAttr $attr1Name $attr2Name;
	//Z
    select $objNameArray[0];
	print ("texDefName="+$texDefName+"\n");
    textureDeformer -name ($texDefName+"Z") -envelope 1 -strength 1 -offset 0 -vectorStrength 1 0 0 -vectorOffset 0 0 0 -vectorSpace "World" -direction "Vector" -pointSpace "Local" -exclusive "";
    $newNameArray=`ls -selection`;		//get name of group just made, as if it's an existing name it will get an incremental number added.
    $texDefName=$newNameArray[0];
    $zDefName=$texDefName;
    $attr1Name=($texDefName+".vectorStrength");
    setAttr $attr1Name 0 0 1;
    parent $texDefHandleName $groupName;
    $texDefHanNewName=($texDefName+"Handle0");
    select $texDefHandleName;
    rename $texDefHanNewName;
    $attr1Name=$amplitude;
    $attr2Name=($texDefName+".envelope");
    connectAttr $attr1Name $attr2Name;
    $attr1Name=($noise3Name+".outColor");
    $attr2Name=($texDefName+".texture");
    connectAttr $attr1Name $attr2Name;
    $attr1Name= ($groupName+".pointSpaceLocal");
    $attr2Name=($texDefName+".pointSpace");
    connectAttr $attr1Name $attr2Name;

//connect object(s) to deformer.
for ($i=0;$i<$numGeo;++$i){
    $objName=$objNameArray[$i];
    print ($objName +"\n");
    select $objName; 
    deformer -e -g $objName $xDefName;
    deformer -e -g $objName $yDefName;
    deformer -e -g $objName $zDefName;
}

select $groupName;
}
